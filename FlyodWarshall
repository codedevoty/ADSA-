import java.util.*;
public class FloydWarshall {

    static final int INF = 9999999;
    static void FloydWarshall1(int[][] graph , int V){
        int[][] dist = new int[V][V];

        // INITIALIZE the Matrix same as input graph
        for(int i =0 ; i < V ; i++){
            for(int j = 0 ;j < V ; j++){
                dist[i][j] = graph[i][j];
            }
        }

        // Apply Floyd Warshall Algorithm
        for(int k =0 ; k < V ; k++){
            for(int i =0 ;i < V ; i++ ){
                for(int j = 0 ; j < V ; j++){
                    if(dist[i][k]+dist[k][j] < dist[i][j]){
                        dist[i][j] = dist[i][k]+dist[k][j];
                    }
                }
            }
        }
        // print the Final Shortest distance Matrix
        printSolution(dist,V);
    }
    static void printSolution(int[][] dist,int V){
        System.out.println("\n Shortest distance Matrix : " );
        for(int i =0 ; i < V ; i++){
            for(int j =0 ; j < V ; j++){
                if(dist[i][j] == INF) System.out.println("INF ");
                else System.out.print(dist[i][j]+ " ");
            }
            System.out.println();
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int V = 4;
        int graph[][] = new int[V][V];
        System.out.println("Enter Adjacent Matrix : ");
        for(int i =0 ; i < V ; i++){
            for(int j =0 ; j < V ; j++){
                graph[i][j] = sc.nextInt();
                if(i == j) graph[i][j] = 0;
            }
        }
      FloydWarshall1(graph, V);
       sc.close();
    }
}
